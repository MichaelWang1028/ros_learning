Tutorial 1: install and config ROS environment
1. install ROS:

2. managing your environment:
	If your are ever having problems finding or using your ROS packages make sure that you have your environment properly setup. A good way to check is to ensure that environment variables like ROS_ROOT and ROS_PACKAGE_PATH are set:

$ printenv | grep ROS

$ source /opt/ros/<distro>/setup.bash

3. Create a ROS Workspace:

$ mkdir -p ~/catkin_ws/src
$ cd ~/catkin_ws
$ catkin_make
$ source devel/setup.bash

To make sure your workspace is properly overlayed by the setup script, make sure ROS_PACKAGE_PATH environment varibale includes the directory you're in.
$ echo $ROS_PACKAGE_PATH
/home/youruser/catkin_ws/src:/opt/ros/kinetic/share


Tutorial 2: navigating the ROS filesystem
Packages: Packages are the software organization unit of ROS code. Each package can contain libraries, executables, scripts, or other artifacts.
Manifests(package.xml): A manifest is a description of a package. It servers to define depencencies between packages and to capture meta information about the package like version, maintainer, license, etc...

Filesystem Tools:
1. rospack find [package_name]
2. roscd [locationname[/subdir]]
3. rosls [locationname[/subdir]]


Tutorial 3: creating a ROS package
1. catkin_create_pkg <package_name> [depend1] [depend2] [depend3]
2. first-order dependencies: rospack depends1 <package_name>

Tutorial 4: build a ROS package
1. catkin_make

Tutorial 5: understanding ROS nodes
1. Quick overview of Graph Concepts
	Nodes: A node is an executable that uses ROS to communicate with other nodes;
	Messages: ROS data type used when subscribing or publishing to a topic;
	Topics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages;
	Master: Name service for ROS;
	rosout: ROS equivalent of stdout/stderr;
	roscore: Master + rosout + parameter server.
2. Nodes
	A node really is not much more an executable file with a ROS package. ROS nodes use a ROS client library to communicate with other nodes. Nodes can publish or subscibe a Topic. Nodes can also provide or use a Service.
3. Cliend Libraries
	ROS client libraries allow nodes written in different programming languages to communicate:
	!rospy = python client library
	!roscpp = c++ client libray 
4. using rosnode
	rosnode displays information about the ROS nodes that are currently running. et. 
	rosnode list command lists these active nodes.	
	rosnode info command returns information about a specific node.
5. rosrun
	rosrun allows to use the package name to directly run a node within a package(without having to know the package path).
usage: rosrun [package_name] [node_name]
6. roscore
	roscore = ros+core: master(provides name service for ROS) + rosout(stdout/stderr) + parameter server(parameter server will be introduced later).


Tutorial 6. understanding ROS topics
1. rosrun rqt_graph rqt_graph;
2. rostopic -h:
	rostopic bw: display bandwidth used by topic;
	rostopic echo: print messages to screen;
	rostopic hz: display publishing rate of topic;
	rostopic lsit: print information about active topics;
	rostopic pub: publish data to topic;
	rostopic type: print topic type.
3. rosmsg: rosmsg show: show information about a ros message;
4. rostopic pub [topic] [msg_type] [args]
5. rosrun rqt_plot rqt_plot;

Turotial 7. understanding ROS services and parameters
1. Services are another way that nodes can communicate with each other. Services allow nodes to send a request and receive a response;
2. using rosservice:
	rosserice can easily attach to ROS's client/service framework with services. rosservice has many commands that can be used on topics, as shown bellow:
	rosservice list: print information about active services;
	rosservice call: call the service with the provided args;
	rosservice type: print service type;
	rosservice find: find services by service type;
	rosservice uri: print service ROSRPC uri;
	rosservice type [service]: rosservice type /clear -> std_srvs/Empty;
	rosservice call [service] [args]: rosservice call /clear;
	rosservice type /spawn | rossrv show:
	rosservice call /spawn 2 2 0.2 "";
3. using rosparam
	rosparam allows to strore and manipulate data on the ROS parameter server. 
	rosparam set: set parameter;
	rosparam get: get parameter;
	rosparam load: load parameters from file;
	rosparam dump: dump parameters to file;
	rosparam delete: delete parameter;
	rosparam list: list parameter names;
usage:
	rosparam dump [file_name] [namespace];
	rosparam load [file_name] [namespace];
	rosparam dump params.yaml: write all the parameters to the file params.yaml;
	rosparam load params.yaml copy
	rosparam get /copy/background_b -> 255


Totorial 8. using rqt_console and roslaunch
1. rqt_console attaches to ROS's logging framework to display output from node.
2. rqt_logger_level allows us to change the verbosity level(DEBUG, WARN, INFO, and ERROR) of nodes as they run.
3. roslaunch: roslaunch [package] [filename.launch];


Tutorial 9. using rosed
rosed is used to directly edit a file within a package by using the package name rather then having to type the entire path to the package.
	rosed [package_name] [filename]


Tutorial 10. creating a ROS msg and srv
1. introduction to msg and srv
	msg: msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages;
	srv: an srv file describes a service. It is composed of two parts: a request and a response;
	Header: the header contains a timestamp and coordinate frame information that are commonly used in ROS.
2. using msg
$ roscd beginner_tutorials
$ mkdir msg
$ echo "int64 num" > msg/Num.msg
Open package.xml, and add:
	<build_depend>message_generation</build_depend>
	<exec_depend>message_runtime</exec_depend>
Open CMakeLists.txt:
	find_package(catkin REQUIRED COMPONENTS
	  roscpp
	  rospy
	  std_msgs
	  message_generation
	)
	catkin_package(
	  ...
	  CATKIN_DEPENDS message_rumtime ..
	  ...)
	add_message_files(
	  FILES
	  Num.msg
	)
	generate_messages(
	  DEPENDENCIES
	  std_msgs
	)
3. using rosmsg
$ rosmsg show beginner_tutorials/Num / rosmsg show Num
4. using srv
$ roscd beginner_tutorials
$ mkdir srv
$ roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv
	add_service_files(
	  FILES
	  AddTwoInts.srv
	)
5. using rossrv
$ rossrv show <service type>
$ rossrv show beginner_tutorials/AddTwoInts

Tutorial 17. recording and playing back data
1. recording all published topics
$ mkdir ~/bagfiles
$ cd ~/bagfiles
$ rosbag record -a
2. examining and playing the bag file
$ rosbag info <your bagfile>
$ rosbag play <your bagfile>
3. recoding a subset of the data
$ rosbag record -O subset /turtle1/cmd_vel /turtle1/pose

Medium Level Tutorial 1. Managing System dependencies
usage: rosdep install [package]
$ rosdep install turtlesim -> All required rosdeps installed successfully

