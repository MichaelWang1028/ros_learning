Tutorial 1: install and config ROS environment
1. install ROS:

2. managing your environment:
	If your are ever having problems finding or using your ROS packages make sure that you have your environment properly setup. A good way to check is to ensure that environment variables like ROS_ROOT and ROS_PACKAGE_PATH are set:

$ printenv | grep ROS

$ source /opt/ros/<distro>/setup.bash

3. Create a ROS Workspace:

$ mkdir -p ~/catkin_ws/src
$ cd ~/catkin_ws
$ catkin_make
$ source devel/setup.bash

To make sure your workspace is properly overlayed by the setup script, make sure ROS_PACKAGE_PATH environment varibale includes the directory you're in.
$ echo $ROS_PACKAGE_PATH
/home/youruser/catkin_ws/src:/opt/ros/kinetic/share


Tutorial 2: navigating the ROS filesystem
Packages: Packages are the software organization unit of ROS code. Each package can contain libraries, executables, scripts, or other artifacts.
Manifests(package.xml): A manifest is a description of a package. It servers to define depencencies between packages and to capture meta information about the package like version, maintainer, license, etc...

Filesystem Tools:
1. rospack find [package_name]
2. roscd [locationname[/subdir]]
3. rosls [locationname[/subdir]]


Tutorial 3: creating a ROS package
1. catkin_create_pkg <package_name> [depend1] [depend2] [depend3]
2. first-order dependencies: rospack depends1 <package_name>

Tutorial 4: build a ROS package
1. catkin_make

Tutorial 5: understanding ROS nodes
1. Quick overview of Graph Concepts
	Nodes: A node is an executable that uses ROS to communicate with other nodes;
	Messages: ROS data type used when subscribing or publishing to a topic;
	Topics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages;
	Master: Name service for ROS;
	rosout: ROS equivalent of stdout/stderr;
	roscore: Master + rosout + parameter server.
2. Nodes
	A node really is not much more an executable file with a ROS package. ROS nodes use a ROS client library to communicate with other nodes. Nodes can publish or subscibe a Topic. Nodes can also provide or use a Service.
3. Cliend Libraries
	ROS client libraries allow nodes written in different programming languages to communicate:
	!rospy = python client library
	!roscpp = c++ client libray 
4. using rosnode
	rosnode displays information about the ROS nodes that are currently running. et. 
	rosnode list command lists these active nodes.	
	rosnode info command returns information about a specific node.
5. rosrun
	rosrun allows to use the package name to directly run a node within a package(without having to know the package path).
usage: rosrun [package_name] [node_name]
6. roscore
	roscore = ros+core: master(provides name service for ROS) + rosout(stdout/stderr) + parameter server(parameter server will be introduced later).


Tutorial 6. understanding ROS topics
1. rosrun rqt_graph rqt_graph;
2. rostopic -h:
	rostopic bw: display bandwidth used by topic;
	rostopic echo: print messages to screen;
	rostopic hz: display publishing rate of topic;
	rostopic lsit: print information about active topics;
	rostopic pub: publish data to topic;
	rostopic type: print topic type.
3. rosmsg: rosmsg show: show information about a ros message;
4. rostopic pub [topic] [msg_type] [args]
5. rosrun rqt_plot rqt_plot;

 
